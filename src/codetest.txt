'use strict';

/**
 * @param {Object} state
 * @param {Object[]} actions
 *
 * @return {Object[]}
 */
function transformStateWithClones(state, actions) {
  const newState = Object.assign({}, state);
  const allSteps = [];

  function doAction(modState, types, action) {
    switch (types) {
      case 'addProperties':
        addProperties(modState, action.extraData);
        allSteps.push({ ...modState });
        break;

      case 'removeProperties':
        removeProperties(modState, action.keysToRemove);
        allSteps.push({ ...modState });
        break;

      case 'clear':
        clear(modState);
        allSteps.push({ ...modState });
        break;
    }
  }

  function addProperties(modObject, data) {
    Object.assign(modObject, data);
  }

  function removeProperties(modObject, keys) {
    for (const key of keys) {
      delete modObject[key];
    }
  }

  function clear(modObject) {
    const keys = Object.keys(modObject);

    for (const key of keys) {
      delete modObject[key];
    }
  }

  for (const action of actions) {
    doAction(newState, action.type, action);
  }

  return allSteps;
}

const state1 = {
  foo: 'bar',
  bar: 'foo',
};
const type = [{
  type: 'addProperties', extraData: { name: 'Jim' },
},
];

transformStateWithClones(state1, type);

module.exports = transformStateWithClones;
